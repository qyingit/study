框架:
框架中主要有以下层次：
    Config:
        配置层，对外配置接口，可以直接初始化配置类，也可以通过 Spring 解析配置生成配置类。
        Config 层对应 dubbo-config 模块。
        Dubbo 支持四种配置方式，包括属性配置、API配置、XML 配置、注解配置，dubbo-config-api 子模块对应前两种，dubbo-config-spring 子模
        块对应后两种。
    Proxy：
        服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton, 以 ServiceProxy 为中心，扩展接口为 ProxyFactory。
        其它层都以 Invoker 为中心，只有到了暴露给用户使用时，才用 Proxy 将 Invoker 转成接口，或将接口实现转成 Invoker，也就是去掉 Proxy
        层 RPC 是可以 Run 的，只是不那么透明，不那么看起来像调本地服务一样调远程服务。
        Proxy 层对应 dubbo-rpc 模块。
    Registry:
        注册中心层，封装服务地址的注册与发现，以服务 URL 为中心，扩展接口为 RegistryFactory, Registry, RegistryService。
        Registry 层对应 dubbo-registry 模块。
        Dubbo 支持 redis、zookeeper、multicast 等注册中心，可以看到 dubbo-registry 模块内包含封装 redis、zookeeper、multicast 等
        注册中心的实现
    Cluster：
        路由层，封装多个提供者的路由及负载均衡，并桥接注册中心，以 Invoker 为中心，扩展接口为 Cluster, Directory, Router, LoadBalance。
        Cluster 层对应 dubbo-cluster 模块。
    Monitor:
        监控层，RPC 调用次数和调用时间监控，以 Statistics 为中心，扩展接口为 MonitorFactory, Monitor, MonitorService。
        Monitor 层对应 dubbo-monitor 模块。
    Protocol:
        远程调用层，封装 RPC 调用，是整个框架的核心，以 Invocation, Result 为中心，扩展接口为 Protocol, Invoker, Exporter，只需要
        Protocol 就可以完成 PRC 调用。 Protocol 层对应 dubbo-rpc 模块。
        dubbo-rpc 模块中提供了许多协议实现，包括 dubbo 协议、http 协议等，dubbo-rpc-api 子模块抽象了动态代理和各种协议，实现一对一的调用，
        另外的每个包分别是各种协议的实现。
    Exchange：
        信息交换层，封装请求响应模式，同步转异步，以 Request, Response 为中心，扩展接口为 Exchanger, ExchangeChannel, ExchangeClient,
         ExchangeServer。
        Exchange 层对应 dubbo-remoting 模块。
    Transport:
        网络传输层，抽象 mina 和 netty 为统一接口，以 Message 为中心，扩展接口为 Channel, Transporter, Client, Server, Codec。
        Transport 层对应 dubbo-remoting 模块。
    Serialize：
        数据序列化层，可复用的一些工具，扩展接口为 Serialization, ObjectInput, ObjectOutput, ThreadPool。
        Serialize 层放在 dubbo-common 模块中。
    除了上面各层明确对应的模块外，框架中还包含以下模块：
    dubbo-common：公共逻辑模块，包括各种工具和通用模型。
    dubbo-container：容器模块，是一个 Standlone 的容器，以简单的 Main 加载 Spring 启动，因为服务通常不需要 Tomcat/JBoss 等 Web
    容器的特性，没必要用 Web 容器去加载服务。
    dubbo-filter：过滤器模块，dubbo-filter-cache 子模块提供缓存过滤器，dubbo-filter-validation 提供参数验证过滤器。
    dubbo-serialization：序列化模块，支持 fastjson、jdk 内置等序列化框架。
    dubbo-matadata：元数据模块，Dubbo 2.7 只将真正属于服务治理的数据发布到注册中心之中（为了减轻注册中心负担），将全量的元数据发布到元
    数据中心。元数据定义为描述数据的数据，在服务治理中，例如服务接口名，重试次数，版本号等等都可以理解为元数据。

dubbo的spi：
    Java SPI：用简单的话说，SPI（Service Provider Interface）是一种服务（接口和实现类）发现机制，将接口实现类的全限定名写在配置文件中，并
    由服务加载器读取配置文件，加载实现类，即为某个接口寻找具体的实现。这样可以在运行时，动态为接口替换实现类。这样做也是为了模块设计的可拔插原则。
    SPI 中最核心的是工具类 java.util.ServiceLoader，在测试程序中调用 ServiceLoader.load 方法开启 SPI：

