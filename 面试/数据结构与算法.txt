3.1 稀疏数组
   二维数组转稀疏数组思路:
   1.遍历原始二维数组,得到有效个数sum
   2.根据sum可以创建稀疏数组 sparseArr int[sum+1][3]
   3.将二维数组的有效数据存入到稀疏数组
   稀疏数组转原始的二维数组思路
   1.先读取稀疏数组第一行,根据第一行数据,创建原始二位数组,比如 chessArr2=int[11][11]
   2.在读取稀疏数组后几行的数据,并赋值给原始的二维数组即可

3.2 队列
   队列是一个有序列表,可以用数组或者链表实现,遵循先入先出原则
   数组模拟队列思路:
   1.队列本身是有序列表,使用数组存储队列数据,则队列数组的声明如下,其中maxSize是队列最大容量
   2.因为队列输入,输出由前后端来处理的因此需要两个变量front及rear分别记录队列前后端下标,
   front随着数据输出而改变,而rear是随着数据的输入改变
   3.数据存入队列的时候 addqueue
   1.将尾指针往后移:rear+1,当front === rear 空
   2.若尾指针rear小于队列的最大下标maxSize -1 ,则将数据存入rear所指的数组元素中,否则无法
   存入数据.rear === maxSize -1(队列满)
   环形队列:
   尾索引的下一个为头索引时表示队列满,(rear+1)%maxSize == front[满]
   队列有效数据的个数 (rear+maxSize-front)%maxSize

4.1 单向链表 链表是有序的,以节点的方式链式存储的
   1.链表以节点得方式存储得,是链式存储
   2.每个节点包含data域,next域;指向下一个节点
   3.链表的各个节点不一定是连续存储的
   4.链表分带头节点链表和没有头节点的链表,根据实际需求确定
   链表的创建思路:
       1.先创建一个head头节点,作用就是表示单链表的头
       2.后面每添加一个节点,就直接加入到链表最后
       3.遍历.通过一个辅助变量遍历,帮助遍历整个链表
       4.添加的时候,找到新添加节点的位置,通过辅助变量指针搞定的 新节点.next=temp.next  将temp.next=新的节点
       5.修改节点 先遍历找到该节点修改
       6.删除节点 遍历找到删除的前一个节点temp 然后temp.next = temp.next.next 删除的节点会被垃圾回收机制回收
   单链表面试题:
        1.统计有效节点个数->遍历知道 temp.next != null
        2.查找单链表的倒数第K个节点->遍历两次,第一次得到总长度n,第二次,查找n-k的数据
        3.单链表反转:新定义一个头节点,遍历原链表,分别将节点数据放置到头部
        4.从尾到头打印单链表 ->1.循环使用栈的push装数据 循环pop出栈打印数据
        5.合并有序链表: 1.循环一个链表,将数据插入另一个链表中

4.2 双向链表:
   分析及实现:
   遍历:和单项链表一样,可以向前,向后
   添加:默认添加到双向链表最后
   修改:思路和原来单项链表一样
   删除:可以实现自我删除某个节点

单项链表应用场景:约瑟夫问题,约瑟夫环
   创建环形链表思路
       1.创建第一个节点,让first指向该节点,并形成环形
       2.后面当我们没创建一个新节点,就把该节点,加入已有的环形链表中
       3.遍历环形链表,先让一个辅助指针curBoy,指向first节点,然后循环遍历该环形链表,直到curBoy.next == first结束 当链表中两个
       节点都指向自己的时候就代表结束

5.1 栈 先入后出的有序列表,栈变化的一端为栈顶,另一端为栈底,最先放入的元素在栈底,最后的元素在栈顶
   应用场景：程序的调用,表达式转换,二叉树的遍历
   数组创建栈思路:
   1.定义一个top表示栈顶,初始化为1
   2.入栈的时候top++;stack[top] = data
   3.出栈,intvalue = stack[top],top --, return value
5.2 中缀表达式:
    思路:
    1.通过一个index值,遍历表达式
    2.如果是一个数字,直接入栈
    3.如果是一个符号,分如下情况
    4.如果当前符号栈为空直接入栈,
    5.如果符号栈有操作符,就进行比较,如果当前操作符优先级小于或等于栈中的操作符,就需要从数栈中pop两个数,在从符号栈中pop出一个符号,
    进行运算,得到结果,如数栈,将当前的操作符入符号栈.如果当前的操作符优先级大于栈中操作符,直接入符号栈
    6.当表达式扫描完毕,就顺序从数栈和符号栈中pop出响应的数和符号,并运行
    7.最后在数栈只有一个数字,就是表达式的结果

6.递归:
   递归式自己调用自己，每次调用传入不同的遍量,有助于编程者解决复杂问题,让代码简洁
   递归需要遵守的规则:
   1.执行一个方法,就创建一个新的受保护的独立空间
   2.方法的局部变量是独立的,不会相互影响,比如n变量
   3.如果方法中使用的是引用类型变量,就会共享引用类型的数据
   4.递归必须像退出递归的条件逼近,否则就是无限递归
   5.一个方法执行完毕,就会返回,遵守谁调用,就将结果返回给谁
   demo1:迷宫问题
   demo2:八皇后问题
   1.创建数组 2.放入皇后判断是否冲突 3.不冲突就继续放入皇后

7.排序算法:
   1.冒泡排序:
       对待排序序列从前往后,依次比较相邻元素,如果发现逆序就交换,值较大的元素的值,从前
       移向后面,使用一个flag、值,如果一次交换也没有就代表排序已经排好
   2.选择排序:
       第一次从数组中选择最小的值与arr[0]交换,第二次从arr[1]-arr[n-1]中选择最小值与
       arr[1]交换,。。。,总共通过n-1次得到一个安排序码从小到大的有序序列
   3.插入排序:
       把n个待排序的元素看成为一个有序表和无序表,开始时有序表中只包含一个元素,无序表中
       包含n-1个元素,排序过程中每次从无序表中取除第一个元素,把他的排序码依次与有序表的排序
       码进行比较，把他插入到有序表中的适当位置,使之成为新的有序表
   4.希尔排序:
       按下标的一定增量进行分组,对每组使用直接插入算法排序:随着增量逐渐减少,每组包含的关键词
       越来越多,当增量减至1时,整个文件分成一组,算法终止
       shellShort(int[] arr){
            int temp=0;
            int count=0;
            for (int gap = arr.length/2; gap > 0; gap/=2){
                for (int i = gap;i<arr.length;i++){
                    for(j=i-gap;j>=0;j-=gap){
                        if(arr[j]>arr[j+gap]){
                            temp = arr[j];
                            arr[j] = arr[j+gap];
                            arr[j+gap] = temp;
                        }
                    }
                }
            }
       }
   5.快速排序:通过一趟排序,将数据分割成独立的两部分,其中一部分所有数据比另外一部分所有数都要小,
   然后按此方法分别对两部分数据进行快速排序,整个过程递归执行,直到整个数据有序
   quickSort(int[] arr, int left ,int right){
       int l = left;
       int r = right;
       int pivot = arr[(left+right)/2];
       while (l<r){
           while(arr[l]<pivot){
               l+=1;
           }

           while(arr[r] > pivot){
                r-=1;
           }
           if (l>=r){
                break;
           }

           temp = arr[l];
           arr[l] =arr[r];
           arr[r] = temp;

           if(arr[l] == pivot) {
               r-=1;
           }
            if(arr[r] == pivot) {
               l+=1;
            }
       }

       if (l==r){
            l+=1;
            r-=1;
       }
       if(left<r){
            quickSort(arr,left,r)
       }
       if(right >l){
           quickSort(arr,l,right)
       }
   }

   6.归并排序 采用分治策略,递归求解
   mergeSort(int[] arr, int left, int right,int[] temp){
       if(left<right){
            int might = (left+right)/2;
            mergeSort(arr,left,mid,temp);
            mergeSort(arr,mid+1,right,temp);
            int i =left;
            int j = mid+1;
            int t =0;
            while(i<mid && j<=right) {
                if(arr[i]<=arr[j]){
                    temp[t] = arr[i];
                    t+=1;
                    i+=1;
                }else{
                    temp[t] = arr[j];
                    t+=1;
                    j+=1;
                }
            }
            while(i <= mid){
                temp[t] =arr[i]
                t+=1;
                i+=1;
            }

            while(j<right){
                temp[t] = arr[j];
                t+=1;
                j+=1;
            }

            t=0;
            int tempLeft = left;
            while(tempLeft <= right){
                arr[tempLeft] = temp[t];
                t+=1;
                tempLeft +=1;
            }
       }
   }

   7.基数排序
   属于分配式排序,又称桶子法.是通过键值的各个位的值,将要排序的元素分配至某些桶中,达到排序的作用
   基数排序属于稳定性的排序,基数排序法是效率高的稳定性排序法
   基数排序是桶排序的扩展
   思想:所有待比较为同样数位长度,数位短的数前面补零,然后从最低为开始,一次进行一次排序,
   从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列

8.1 查找算法
    1.线性查找算法
    2.二分查找
    确定数组的中间下标,让需要查找的数跟arr[mid]比较,如果<arr[mid]查找的数在左边,需要递归查找
    >arr[mid],需要查找的数在右边递归向右查找,当left>right就结束查找
    3.插值查找算法
    4.斐波那契查找算法

9.hash表


10.二叉树:
    二叉树遍历:前序,中序,后序
    前序遍历:先输出当前节点,如果左节点不为空,则递归继续前序遍历,如果右节点不为空,di归继续前序遍历
    preOrder(){
        sout(this);
        if(this.left != null){
            this.left.preOrder()
        }
        if(this.right != null){
            this.right.preOrder()
        }
    }
    查找指定节点:
    preOrder(int no){
        sout(this);
        if (this.no == no){
            return this;
        }
        Object o =null;
        if(this.left != null){
            o=this.left.preOrder();
        }
        if(o != null){
            return o;
        }
        if(this.right != null){
            this.right.preOrder();
        }
        return o;
    }

    二叉树删除节点:
    如果是叶子节点,则删除该节点,如果是非叶子节点,删除该子树
    delOrder(int no){
         if(this.left != null && this.left.no = no){
               this.left = null;
               return;
         }
         if(this.right != null && this.right.no = no){
                this.right = null;
                return;
         }
         if(this.left != null){
            this.left.delOrder(no);
         }
         if(this.right != null){
             this.right.delOrder(no);
          }
    }
    顺序存储二叉树:只考虑完全二叉树 第n个元素的左子节点为 2*n+1 第n个元素的左子节点为 2*n+2
    第n个元素的父节点为(n-1)/2 n表示二叉树中的第几个元素

    线索二叉树: