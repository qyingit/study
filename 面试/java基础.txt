java基础:
      arraylist   数组, 初始长度10,扩容1.5倍
      linkedlist  链表,通过指针相连,插入容易,但是查询不能通过下标访问
      Set   底层是一个HashMap,其value为null
      HashMap 底层是个entrySet数组   长度16 加载因子0.75 扩容一倍  因为需要减少hsah碰撞
      ArrayList类的java.util.ConcurrentModificationException
      原因：多个线程同时修改list的内容
      解决方法:使用Vector类,使用Collections.synchronizedList()方法，参数为一个List对象,使用CopyOnWriteArrayList类
      CopyOnWriteArrayList类的add()方法源码：
        public boolean add(E e) {
            final ReentrantLock lock = this.lock;
            lock.lock();
            try {
                Object[] elements = getArray();
                int len = elements.length;
                Object[] newElements = Arrays.copyOf(elements, len + 1);
                newElements[len] = e;
                setArray(newElements);
                return true;
            } finally {
                lock.unlock();
            }
        }
      HashSet类也是线程不安全的:
         使用Vector类
         使用Collections.synchronizedSet()方法，参数为一个Set对象
         使用CopyOnWriteArraySet类
         CopyOnWriteArraySet类的底层使用了CopyOnWriteArrayList类

java线程池： demo：com.qying.threadpool.ThreadPoolDemo
     线程池做的工作主要是控制运行的线程的数量，处理过程中将任务放到队列，然后再线程创建后启动这些任务
，如果线程数量超过了最大数量，超出的任务排队等候，等其他线程执行完毕，再从队列中取出任务来执行。
特点：
     线程复用，控制最大并发数，，管理线程
相关类：
     Java中，线程池由Executor类完成，相关的类有Executor、Executors、ExecutorService、ThreadPoolExecutor

     //创建固定线程数的线程池
     ExecutorService threadPool = Executors.newFixedThreadPool(5);

     //底层
     public static ExecutorService newFixedThreadPool(int nThreads) {
             return new ThreadPoolExecutor(nThreads, nThreads,
                                           0L, TimeUnit.MILLISECONDS,
                                           new LinkedBlockingQueue<Runnable>());
         }
     //创建只有一个线程的线程池
     ExecutorService threadPool = Executors.newSingleThreadExecutor();

     //底层
     public static ExecutorService newSingleThreadExecutor() {
             return new FinalizableDelegatedExecutorService
                 (new ThreadPoolExecutor(1, 1,
                                         0L, TimeUnit.MILLISECONDS,
                                         new LinkedBlockingQueue<Runnable>()));
         }
     //创建根据需要处理的任务创建线程的线程池
     ExecutorService threadPool = Executors.newCachedThreadPool();

     //底层
     public static ExecutorService newCachedThreadPool() {
             return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                           60L, TimeUnit.SECONDS,
                                           new SynchronousQueue<Runnable>());
         }
     ThreadPoolExecutor构造方法的七个参数
     	/**
          * Creates a new {@code ThreadPoolExecutor} with the given initial
          * parameters.
          *
          * @param corePoolSize 线程池的核心线程数。当线程池中的线程数目达到corePoolSize时，新的任务会被放到缓存队列当中
          * @param maximumPoolSize 线程池能够容纳的最大线程数，这个值必须大于等于1
          * @param keepAliveTime 非核心的空闲线程的存活时间。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用。
          * @param unit the keepAliveTime的单位，是秒、分、时等等
          * @param workQueue 任务队列，存放被提交但尚未被执行的任务
          * @param threadFactory 用于创建线程的线程工厂，一般用默认的就可以了
          * @param handler 拒绝策略。当最大线程数的线程都在执行，任务队列也满了的时候，新提交任务就会触发拒绝策略，根据具体的拒绝策略来处理多的任务
          * @throws IllegalArgumentException if one of the following holds:<br>
          *         {@code corePoolSize < 0}<br>
          *         {@code keepAliveTime < 0}<br>
          *         {@code maximumPoolSize <= 0}<br>
          *         {@code maximumPoolSize < corePoolSize}
          * @throws NullPointerException if {@code workQueue}
          *         or {@code threadFactory} or {@code handler} is null
          */
     public ThreadPoolExecutor(int corePoolSize,
                                   int maximumPoolSize,
                                   long keepAliveTime,
                                   TimeUnit unit,
                                   BlockingQueue<Runnable> workQueue,
                                   ThreadFactory threadFactory,
                                   RejectedExecutionHandler handler) {
             if (corePoolSize < 0 ||
                 maximumPoolSize <= 0 ||
                 maximumPoolSize < corePoolSize ||
                 keepAliveTime < 0)
                 throw new IllegalArgumentException();
             if (workQueue == null || threadFactory == null || handler == null)
                 throw new NullPointerException();
             this.acc = System.getSecurityManager() == null ?
                     null :
                     AccessController.getContext();
             this.corePoolSize = corePoolSize;
             this.maximumPoolSize = maximumPoolSize;
             this.workQueue = workQueue;
             this.keepAliveTime = unit.toNanos(keepAliveTime);
             this.threadFactory = threadFactory;
             this.handler = handler;
         }

线程池的拒绝策略:
     JDK内置的拒绝策略：
     AbortPolicy：默认值。直接抛出RejectedExecutionException，阻止系统正常运行
     CallerRunsPolicy：调用者运行，该策略既不会抛弃任务，也不会抛出异常，而是将任务回退到调用者
     DiscardOldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入到队列中
     DiscardPolicy：直接丢弃任务，不处理也不抛出异常，如果任务允许丢失，这是最好的一种方案
你在工作中使用Executors创建的哪种线程池:
     一个都不用，自己定义
     Executors创建线程池的弊端如下：
     FixedThreadPool和SingleThreadPool：允许的请求队列的长度为Integer.MAX_VALUE，可能会堆积大量的请求，导致OOM
     CachedThreadPool和ScheduledThreadPool：允许创建的线程数为Integer.MAX_VALUE，可能会创建大量的线程，导致OOM

如何自己配置线程池参数：
     CPU密集型（计算密集型）：尽可能配置少的线程数量，因为线程开太多也没有处理器执行。取值CPU核数+1个线程。CPU密集的意思是
     任务需要大量的运算，而没有阻塞，CPU一直在全速运行，CPU密集型只有在真正的多核CPU上通过多线程才可能得到加速，而在单核CPU
     上总的运算能力一定所以开几个线程都一样
     I/O密集型：并不是一直在执行任务，所以尽可能多地配置线程，比如CPU核数*2。I/O密集型会产生大量的阻塞。在单线程CPU上运行
     I/O密集型任务会导致大量的运算能力浪费在等待上，使用多线程可以大大地加速程序地运行，这种加速主要是利用了被浪费的阻塞时间
     。大厂参考工时：CPU核数/（1-阻塞系数），阻塞系数在0.8到0.9之间
     首先，查看Runtime.getRuntime(),availableProcessors()得到可用处理器数量，应该也就是上面说的CPU核数

java的锁:
     公平锁与非公平锁:
        公平锁:多个线程按照申请锁的顺序来获取锁，先来后到,在并发环境中，每个线程在获取锁时会先查看此锁维护的等待队列，如果为空
        ，或者当前线程等待队列的第一个，就占有锁，否则就会加入到等待队列，以后会按照FIFO的规则从队列中取
        非公平锁:多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程获取锁。在高并发的情况下，有可能会造
        成优先级反转或者饥饿现象
        ReentrantLock类:默认是非公平锁，在构造函数中加参数true，会创建公平锁
        优点：非公平锁的吞吐量大
        synchronized:也是一种非公平锁
     可重入锁，也叫递归锁：
        指的是同一个线程外层函数获得锁之后，内层递归函数仍然能获取该锁的代码，在同一个线程在外层方法获取锁的时候，进入内层方法会自动获取锁
        ReentrantLock和synchronized都是可重入锁
        作用:避免死锁
     自旋锁:demo com.qying.lock.SpinLockDemo
        指尝试获取诉讼的线程不会立即阻塞，而是采用循环的方式取获取锁，这样的好处事减少线程上下文切换的消耗，缺点是循环会消耗CPU
     独占锁:该锁一次只能被一个线程持有,ReentrantLock和synchronized都是独占锁
     共享锁:锁可以同时被多个线程持有 demo:com.qying.lock.ReadWriteLockDemo
         ReentrantReadWriteLock，读锁是共享锁，写锁是独占锁。读锁的共享可以保证并发读是高效的，读写，写读，写写是互斥的
     死锁:demo：com.qying.lock.dlock.DeadLockDemo
     两个或两个以上的线程在执行过程中，因争夺资源而造成的一种互相等待的现象。若无外力干涉，它们都将无法推进
     下去。如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则就会因为争夺有限的资源而进入死锁






CAS compare and swap 比较并交换: demo
    是一条CPU原语。功能是判断某个内存的值是否为预期值，如果是则更新为新的值，这个操作是原子性的
    比较工作内存中的值与主内存中的值，如果相同则执行操作，否则取出后继续比较继续比较知道相同
AtomicInteger类getAndIncrement()源代码：
    public final int getAndIncrement() {
        return unsafe.getAndAddInt(this, valueOffset, 1);
    }
    Unsafe类getAndAddInt()参数列表
    this：当前对象
    valueOffset：内存偏移量，内存地址
    Unsafe类:
        是CAS的核心类，由于Java方法无法直接访问底层操作系统，需要通过本地方法来访问。Unsafe类相当于一个后门，基于该类可以直接操作特定内存的数据。
        Unsafe类在sun.misc包中，其内部方法操作可以像C的指针一样直接操作内存
        Unsafe类中的所有方法都是native修饰的（不对啊，很多方法明明没加native）
        CAS并发原语体现在Java中就是Unsafe类中的各个方法。调用Unsafe类中的CAS方法，JVM会帮我们是先出CAS汇编指令。这是一种完全依赖于硬件的功能，
        通过它实现了原子操作。原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个剁成，并且原语的执行必须是连续的，在执行过程中
        不允许被中断，也就是说CAS是一条CPU的原子指令，不会造成的数据不一致问题
    Unsafe类的getAndAddInt()源码：
        public final int getAndAddInt(Object var1, long var2, int var4) {
            int var5;
            do {
                var5 = this.getIntVolatile(var1, var2);
            } while (!this.compareAndSwapInt(var1, var2, var5, var4 + var5));
            return var5;
        }
        参数列表：
        var1 AtomicInteger本身
        var2 变量var1的内存地址
        var3
        var4 值修改的量，比如加1的这个1
        var5 通过内存地址找出的当前时间保存在这个位置上的值
        方法执行过程：
        取出地址上的值var5，并与var1比较（我感觉应该是var5和var2地址上的值比较，如果是var5和var1比较不久死循环了吗）
        如果一致，说明没有被修改（这里先不考虑ABA问题）。就可以将var4+var5的值写到这个地址上，compareAndSwapInt()方法返回true，结束do-while循环
        如果不一致，就继续执行do-while循环，这个循环称为自旋
        问题：如果不一致，在这个方法里不是死循环了？
        回答：不会，因为do-while的方法体里会读取一次var5，不可能一直死循环
    为什么用CAS而不用synchronized：
        synchronized加锁，一致性得到保障，但是并发性下降，CAS既保证了一致性又保证了并发性
        CAS的缺点
        比较失败会一直尝试，如果长时间不成功，可能会给CPU带来很大的开销
        只能保证一个共享变量的原子性，注意是一个。多个变量时就不能保证原子性了
    ABA问题 demo：com.qying.cas.aba.AtomicReferenceDemo
    BA问题的产生
    如果只管头尾的值是否一致，那就可以忽略ABA问题，不然的话就是有问题的
    如何解决ABA问题
    原子类已经不够用了，使用AtomicReference类+版本号
    AtomicStampedReference

阻塞队列：demo = com.qying.blockqueue.SynchronousQueueDemo
    当队列为空时，获取元素的操作将会被阻塞
    当队列为满时，添加元素的操作将会被阻塞
    所谓阻塞，指在某些情况下会挂起线程。一旦满足某些条件，被挂起的线程又会被自动唤醒。
    BlockingQueue使我们不用关注什么时候需要阻塞线程什么时候需要唤醒线程。
    BlockingQueue接口：
        继承自Collection接口
        ArrayBlockingQueue：底层是数组的有界阻塞队列
        LinkedBlockingQueue：底层是链表的有界阻塞队列（队列上限默认是Integer.MAX_VALUE）
        PriorityBlockingQueue：支持优先级排序的无界阻塞队列
        DelayQueue：使用优先级队列实现的延迟无界阻塞队列
        SynchronousQueue：不存储元素的阻塞队列，也即单个元素的队列
        LinkedTransferQueue：底层是链表的无界阻塞队列
        LinkedBlockingDeque：底层是链表的双向阻塞队列


synchronized和Lock的区别
    构成:synchronized关键字属于JVM层面，底层是通过monitor对象来完成，wait/notify等方法也依赖于monitor对象。monitorenter、monitorexit
        Lock是Java的一个类，是api层面的锁
    使用方法:
    synchronized不需要用户手动释放锁，代码执行完后系统会自动让线程释放锁对象的占用,Lock需要用户手动释放锁，这有可能会导致死锁的现象
    是否可以中断:
    synchronized不可中断，除非抛出异常或者正常运行完成
    Lock可中断:1.设置方法，tryLock(long timeout, TimeUnit unit),lockInterruptibly放代码块中，调用interrupt()方法可中断
    加锁是否公平
        synchronized是非公平锁,Lock可以通过参数设置，无参时为非公平锁
    锁绑定多个Condition
        synchronized没有这种机制,Lock可以实现分组唤醒需要唤醒的线程们，可以精确唤醒，而不是像synchronized那样要么随机唤醒一个线程要么唤醒全
        部线程

final关键字
    final修饰的类不能继承，在使用final修饰类的时候，要注意谨慎选择，除非这个类真的在以后不会用来继承或者出于安全的考虑，
 尽量不要将类设计为final类。
    使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为
内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。在最近的Java版本中，不需要使用final方法进行这些优化了。“注：类的private方
法会隐式地被指定为final方法。
    对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能
再让其指向另一个对象
类的final变量和普通变量有什么区别
    当用final作用于类的成员变量时，成员变量（注意是类的成员变量，局部变量只需要保证在使用之前被初始化赋值即可）必须在定义时或者构造器中进行初始化
赋值，而且final变量一旦被初始化赋值之后，就不能再被赋值了
final修饰的引用变量指向的对象内容可变吗
    这说明引用变量被final修饰之后，虽然不能再指向其他对象，但是它指向的对象的内容是可变的。
final和static
    很多时候会容易把static和final关键字混淆，static作用于成员变量用来表示只保存一份副本，而final的作用是用来保证变量不可变

HashMap为什么线程不安全(hash碰撞与扩容导致)
    HashMap底层是一个Entry数组，一旦发生Hash冲突的的时候，HashMap采用拉链法解决碰撞冲突，
    Entry内部的变量： final Object key; Object value; Entry next; int hash;
    1.7采用头插法,在resize的时候会发生扩容,多个线程进行扩容,容易在链表之间形成死循环.与数据丢失现象
    1.8采用尾插法,多个线程保存数据会导致数据存在丢失现象

ConcurrentHashMap源码分析:https://www.cnblogs.com/developer_chan/p/11527120.html
    ConcurrentHashMap是HashMap的线程安全版本，内部使用了数组+链表+红黑树的结构来存储数据，相对于同样线程安全的Hashtable来说，它在效率方面有
很大的提升，因此多线程环境下更多的是使用ConcurrentHashMap，因此有必要对其原理进行分析。
    数据结构：数组+链表+红黑树，默认容量16，线程同步，不允许[key,value]为null。
    节点链表上的元素大于等于8时，并不是一定要将数据结构转换成树。而是要先判断数组的容量，如果数组长度小于64，会进行扩容(扩容为原来数组长度的一倍)，
    否则才会转换成树。