1.Netty 是什么
    一个高性能的,异步事件驱动的网络应用程序框架,用于快速开发可维护得高性能服务器和客户端,netty基于nio,封装jdk得Nio,让使用更灵活

2.netty特点:
    高并发:基于NIO开发得网络通信框架,(Nio非阻塞IO（buffer,channel,selector）,bio(byte,socket)),bio得连接会占用现场,而nio基于
    IO多路复用器,通过selector发现是连接还是读写请求,连接可以用一个线程去处理,读写请求可以用多线程处理
    传输快:netty基于零拷贝特性,尽量减少不必要的内存拷贝,实现更高效率的传输
    封装好:netty封装了NIO的操作细节,提供了易于使用调用的接口

3.netty的优势有哪些
    使用简单:封装了NIO细节,使用方便
    功能强大:预置多种编码解码功能,支持多种主流协议
    定制能力强:通过channelHandler对通信框架灵活扩展
    性能高:netty性能优秀,内存池化技术与reractor模式
    社区活跃

4.netty的应用场景:
    rocketmq,大数据的通信框架,dubbo,一系列需要定制协议,传输快的项目

5.高性能表现得方面:
    1.IO线程模型:同步非阻塞,用最少得资源做更多得事
    2.内存零拷贝:尽量减少不必要得内存拷贝,实现更高得效率传输
    3.内存池设计:申请得内存可以重用,主要指直接内存,内存通过二叉查找树管理内存分配情况
    4.串行化处理读写:避免使用锁带来性能开销
    5.高性能序列化协议:支持protobuf等高性能序列化协议

6.netty的零拷贝
    1.netty接受和发送ByteBuffer使用director buffer,使用堆外内存进行socket读写,不需要进入内存缓冲区
    2.netty提供组合buffer对象,避免聚合多个Bytebuffer对象,用户可以像操作buffer对组合buffer操作,避免传统内存拷贝将校buffer合并为
    大buffer
    3.netty文件传输使用transferto方法,直接将文件发送到目标channel,避免传统的while导致内存拷贝

7.netty中的重要组件
    channel:netty的网络抽象类,包括基本的io操作,还有read,bind,connect,write
    eventloop:主要是配合channel处理I/O操作,用来处理连接的生命周期中所发生的事情
    channelfuture:netty框架中所有的i/o操作都是异步的,因此我们需要channelFuture的addlistener()注册监听事件,操操作成功或者失败
    会自动触发返回结果
    channelHandler:充当所有处理入站和出站数据的逻辑容器
    channelHandler:用来处理各种事件,如连接,数据接受,异常,数据转换等
    channelPepe:为channelHander链提供容器,当channel创建时,会自动分配到专属的ChannelPipe中,这个关联是永久性的

8.事件驱动模型:
    事件处理模型的两种思路:
    1.轮询方式:线程不断访问相关事件源有没有发生事件,发生事件就调用事件处理逻辑
    2.事件驱动方式:发生事件,主线程把事件放入事件队列,另外线程不断循环消费事件列表中的事件,调用事件对应的处理逻辑事件,事件驱动方式
    也被称为消息通知方式,就是设计模式中的观察者模式
    4个基本组件:事件队列:接受事件入口,存储事件,2:分发器 将不同的事件分发到不同的业务逻辑单元 3:事件通道 分发器与处理器的联系渠道
    4:事件处理器 实现业务逻辑,处理完成后会发出事件,触发下一步操作
    与传统轮询相比:可扩展性好,分布式的异步架构,事件处理器之间的高度解耦,可以方便扩展事件处理逻辑,高性能,基于队列暂存事件,能方便
    并行异步处理事件

9.reactor线程模型
    reactor模型,指通过一个或多个输入同时传递给服务器的服务请求事件驱动处理模式,服务器处理传入的多路请求,并将它们同步派发给请求对
    应得处理线程,reactor模式成为dispatch模式,即I/O多路复用同意监听事件,收到事件后分发(Dispatch给某进程)，是编写高性能网络服务器
    的必备技术之一。
    reactor两个关键组成:
    reactor在单独得线程中运行,负责监听和分发事件,分发给适当得处理程序来对IO事件做出反应
    handlers处理程序执行I/O事件要完成的实际事件,类似于客户想要与之交谈的公司中的实际官员.reactor通过调度适当处理程序来响应
    I/O事件,处理程序执行非阻塞操作
    Reactor就是一个执行while (true) { selector.select(); …}循环的线程，会源源不断的产生新的事件，称作反应堆很贴切。

10.netty的线程模型
   netty通过reactor模型基于多路复用器接受并处理用户请求,内部实现两个线程池,boss线程池和worker线程池,其中boss线程池处理accept事件
   ,当接收到accept事件的请求时,把对应的socket封装到NIOScoketChannel中,交给work线程池,其中worker线程池负责请求的read和write事件,
   由对应的hanler处理
   （1）单线程模型：所有I/O操作都由一个线程完成，即多路复用、事件分发和处理都是在一个Reactor线程上完成的。既要接收客户端的连接请
   求,向服务端发起连接，又要发送/读取请求或应答/响应消息。一个NIO 线程同时处理成百上千的链路，性能上无法支撑，速度慢，若线程进入
   死循环，整个程序不可用，对于高负载、大并发的应用场景不合适。

   （2）多线程模型：有一个NIO 线程（Acceptor） 只负责监听服务端，接收客户端的TCP 连接请求；NIO 线程池负责网络IO 的操作，即消息
   的读取、解码、编码和发送；1 个NIO 线程可以同时处理N 条链路，但是1 个链路只对应1 个NIO 线程，这是为了防止发生并发操作问题。但
   在并发百万客户端连接或需要安全认证时，一个Acceptor 线程可能会存在性能不足问题。

   （3）主从多线程模型：Acceptor 线程用于绑定监听端口，接收客户端连接，将SocketChannel 从主线程池的Reactor 线程的多路复用器上
   移除，重新注册到Sub 线程池的线程上，用于处理I/O 的读写等操作，从而保证mainReactor只负责接入认证、握手等操作；

11.TCP 粘包/拆包的原因及解决方法
   现象:TCP通过流的方式处理数据,一个完整的包可能会被TCP拆分成多个包进行发送,也可能把小包封装成一个大包发送
   原因：
   应用程序写入的字节大小大于套接字发送缓冲区的大小，会发生拆包现象，而应用程序写入数据小于套接字缓冲区大小，网卡将应用多次写入的
   数据发送到网络上，这将会发生粘包现象；
   进行MSS大小的TCP分段，当TCP报文长度-TCP头部长度>MSS的时候将发生拆包,以太网帧的payload（净荷）大于MTU（1500字节）进行ip分片。
   解决方法：
   （1）消息定长:FixedLengthFrameDecoder类（2）包尾增加特殊字符分割:行分隔符类:LineBasedFrameDecoder或自定义分隔符类:DelimiterBasedFrameDecoder
   （3）将消息分为消息头和消息体:LengthFieldBasedFrameDecoder类.分为有头部的拆包与粘包、长度字段在前且有头部的拆包与粘包、多扩展头部的拆包与粘包。

12.JDK原生NIO程序有什么问题
    1.NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等
    2.需要其它额外技能做铺垫，例如熟悉Java多线程编程，因为NIO编程涉及到Reactor模式，你必须对多线程和网路编程非常熟悉，才能编写出
    高质量的NIO程序
    3.可靠性能力补齐，开发工作量和难度都非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等，
    NIO编程的特点是功能开发相对容易，但是可靠性能力补齐工作量和难度都非常大
    4.JDK NIO的BUG，例如臭名昭著的epoll bug，它会导致Selector空轮询，最终导致CPU 100%。官方声称在JDK1.6版本的update18修复了该
    问题，但是直到JDK1.7版本该问题仍旧存在，只不过该bug发生概率降低了一些而已，它并没有被根本解决

13.Netty常见使用场景
   1.互联网行业在分布式系统中，各个节点之间需要远程服务调用，高性能的RPC框架必不可少，Netty作为异步高新能的通信框架,往往作为基础通
   信组件被这些RPC框架使用。典型的应用有：阿里分布式服务框架Dubbo的RPC框架使用Dubbo协议进行节点间通信，Dubbo协议默认使用Netty作为基础通信组件，用于实现各进程节点之间的内部通信。
   2.游戏行业 无论是手游服务端还是大型的网络游戏，Java语言得到了越来越广泛的应用。Netty作为高性能的基础通信组件，它本身提供了TCP/
   UDP和HTTP协议栈。非常方便定制和开发私有协议栈，账号登录服务器，地图服务器之间可以方便的通过Netty进行高性能的通信
   3.大数据领域 经典的Hadoop的高性能通信和序列化组件Avro的RPC框架，默认采用Netty进行跨界点通信，它的Netty Service基于Netty框架
   二次封装实现

15、Netty架构设计
   core:支持零拷贝字节缓冲  通信API  可扩展事件模型
   协议支持: HTTP PROTOBUF SSL  startTls 文本协议  二进制协议  zlib/gzip压缩  Resp  webSocket 大文件传输
   容器继承:OSGI  JbossMC  Spring  Guice
   传输服务: 传统阻塞BIO 非阻塞NIO

16.netty发送消息的方式:
   直接写入channel,消息从channelPipeline当中尾部开始移动
   写入channelHandler绑定的channelHandlerContext中,消息从channelPipeline中的下一个ChannelHandler中移动

17.默认情况 Netty 起多少线程？何时启动
   Netty 默认是 CPU 处理器数的两倍，bind 完之后启动

18.了解哪几种序列化协议
    序列化（编码）是将对象序列化为二进制形式（字节数组），主要用于网络传输、数据持久化等；而反序列化（解码）则是将从网络、磁盘等
    读取的字节数组还原成原始对象，主要用于网络传输对象的解码，以便完成远程调用。
    影响序列化性能的关键因素：序列化后的码流大小（网络带宽的占用）、序列化的性能（CPU资源占用）；是否支持跨语言（异构系统的对接和
    开发语言切换）。
    （1）Java默认提供的序列化：无法跨语言、序列化后的码流太大、序列化的性能差
    （2）XML，优点：人机可读性好，可指定元素或特性的名称。缺点：序列化数据只包含数据本身以及类的结构，不包括类型标识和程序集信息；
    只能序列化公共属性和字段；不能序列化方法；文件庞大，文件格式复杂，传输占带宽。适用场景：当做配置文件存储数据，实时数据转换。
    （3）JSON，是一种轻量级的数据交换格式，优点：兼容性高、数据格式比较简单，易于读写、序列化后数据较小，可扩展性好，兼容性好、
    与XML相比，其协议比较简单，解析速度比较快。缺点：数据的描述性比XML差、不适合性能要求为ms级别的情况、额外空间开销比较大。适用
    场景（可替代ＸＭＬ）：跨防火墙访问、可调式性要求高、基于Web browser的Ajax请求、传输数据量相对小，实时性要求相对低（例如秒级别
    ）的服务。
    （4）Fastjson，采用一种“假定有序快速匹配”的算法。优点：接口简单易用、目前java语言中最快的json库。缺点：过于注重快，而偏离了
    “标准”及功能性、代码质量不高，文档不全。适用场景：协议交互、Web输出、Android客户端
    （5）Thrift，不仅是序列化协议，还是一个RPC框架。优点：序列化后的体积小, 速度快、支持多种语言和丰富的数据类型、对于数据字段的
    增删具有较强的兼容性、支持二进制压缩编码。缺点：使用者较少、跨防火墙访问时，不安全、不具有可读性，调试代码时相对困难、不能与
    其他传输层协议共同使用（例如HTTP）、无法支持向持久层直接读写数据，即不适合做数据持久化序列化协议。适用场景：分布式系统的RPC解
    决方案
    （6）Avro，Hadoop的一个子项目，解决了JSON的冗长和没有IDL的问题。优点：支持丰富的数据类型、简单的动态语言结合功能、具有自我描
    述属性、提高了数据解析速度、快速可压缩的二进制数据形式、可以实现远程过程调用RPC、支持跨编程语言实现。缺点：对于习惯于静态类型
    语言的用户不直观。适用场景：在Hadoop中做Hive、Pig和MapReduce的持久化数据格式。
    （7）Protobuf，将数据结构以.proto文件进行描述，通过代码生成工具可以生成对应数据结构的POJO对象和Protobuf相关的方法和属性。优
    点：序列化后码流小，性能高、结构化数据存储格式（XML JSON等）、通过标识字段的顺序，可以实现协议的前向兼容、结构化的文档更容易
    管理和维护。缺点：需要依赖于工具生成代码、支持的语言相对较少，官方只支持Java 、C++ 、python。适用场景：对性能要求高的RPC调用
    、具有良好的跨防火墙的访问属性、适合应用层对象的持久化
    （8）其它
     protostuff 基于protobuf协议，但不需要配置proto文件，直接导包即可
     Jboss marshaling 可以直接序列化java类， 无须实java.io.Serializable接口
     Message pack 一个高效的二进制序列化格式
     Hessian 采用二进制协议的轻量级remoting onhttp工具
     kryo 基于protobuf协议，只支持java语言,需要注册（Registration），然后序列化（Output），反序列化（Input））

19.Netty 支持哪些心跳类型设置
    1.readerIdleTime：为读超时时间（即测试端一定时间内未接受到被测试端消息)
    2.writerIdleTime：为写超时时间（即测试端一定时间内向被测试端发送消息)
    3.allIdleTime：所有类型的超时时间

20.Netty 和 Tomcat 的区别
   作用不同：Tomcat 是 Servlet 容器，可以视为 Web 服务器，而 Netty 是异步事件驱动的网络应用程序框架和工具用于简化网络编程，
   例如TCP和UDP套接字服务器。
   协议不同：Tomcat 是基于 http 协议的 Web 服务器，而 Netty 能通过编程自定义各种协议，因为 Netty 本身自己能编码/解码字节流，
   所有 Netty 可以实现，HTTP 服务器、FTP 服务器、UDP 服务器、RPC 服务器、WebSocket 服务器、Redis 的 Proxy 服务器、MySQL 的
   Proxy 服务器等等。

21.NIOEventLoopGroup源码
   NioEventLoopGroup(其实是MultithreadEventExecutorGroup) 内部维护一个类型为 EventExecutor children [], 默认大小是处理器核数
    * 2, 这样就构成了一个线程池，初始化EventExecutor时NioEventLoopGroup重载newChild方法，所以children元素的实际类型为
    NioEventLoop。

   线程启动时调用SingleThreadEventExecutor的构造方法，执行NioEventLoop类的run方法，首先会调用hasTasks()方法判断当前taskQueue
   是否有元素。如果taskQueue中有元素，执行 selectNow() 方法，最终执行selector.selectNow()，该方法会立即返回。如果taskQueue没有
   元素，执行 select(oldWakenUp) 方法

   select ( oldWakenUp) 方法解决了 Nio 中的 bug，selectCnt 用来记录selector.select方法的执行次数和标识是否执行过
   selector.selectNow()，若触发了epoll的空轮询bug，则会反复执行selector.select(timeoutMillis)，变量selectCnt 会逐渐变大，
   当selectCnt 达到阈值（默认512），则执行rebuildSelector方法，进行selector重建，解决cpu占用100%的bug。

   rebuildSelector方法先通过openSelector方法创建一个新的selector。然后将old selector的selectionKey执行cancel。最后将
   old selector的channel重新注册到新的selector中。rebuild后，需要重新执行方法selectNow，检查是否有已ready的selectionKey。

   接下来调用processSelectedKeys 方法（处理I/O任务），当selectedKeys != null时，调用processSelectedKeysOptimized方法，
   迭代 selectedKeys 获取就绪的 IO 事件的selectkey存放在数组selectedKeys中, 然后为每个事件都调用 processSelectedKey 来处理它
   ，processSelectedKey 中分别处理OP_READ；OP_WRITE；OP_CONNECT事件。

   最后调用runAllTasks方法（非IO任务），该方法首先会调用fetchFromScheduledTaskQueue方法，把scheduledTaskQueue中已经超过延迟
   执行时间的任务移到taskQueue中等待被执行，然后依次从taskQueue中取任务执行，每执行64个任务，进行耗时检查，如果已执行时间超过
   预先设定的执行时间，则停止执行非IO任务，避免非IO任务太多，影响IO任务的执行。

   每个NioEventLoop对应一个线程和一个Selector，NioServerSocketChannel会主动注册到某一个NioEventLoop的Selector上，
   NioEventLoop负责事件轮询。

   Outbound 事件都是请求事件, 发起者是 Channel，处理者是 unsafe，通过 Outbound 事件进行通知，传播方向是 tail到head。Inbound
   事件发起者是 unsafe，事件的处理者是 Channel, 是通知事件，传播方向是从头到尾。

   内存管理机制，首先会预申请一大块内存Arena，Arena由许多Chunk组成，而每个Chunk默认由2048个page组成。Chunk通过AVL树的形式组织
   Page，每个叶子节点表示一个Page，而中间节点表示内存区域，节点自己记录它在整个Arena中的偏移地址。当区域被分配出去后，中间节点上
   的标记位会被标记，这样就表示这个中间节点以下的所有节点都已被分配了。大于8k的内存分配在poolChunkList中，而PoolSubpage用于分配
   小于8k的内存，它会把一个page分割成多段，进行内存分配。

   ByteBuf的特点：支持自动扩容（4M），保证put方法不会抛出异常、通过内置的复合缓冲类型，实现零拷贝（zero-copy）；不需要调用
   flip()来切换读/写模式，读取和写入索引分开；方法链；引用计数基于AtomicIntegerFieldUpdater用于内存回收；PooledByteBuf采用
   二叉树来实现一个内存池，集中管理内存的分配和释放，不用每次使用都新建一个缓冲区对象。UnpooledHeapByteBuf每次都会新建一个缓
   冲区对象

22.什么是epoll bug  https://www.cnblogs.com/jayit/p/8241634.html
   若Selector的轮询结果为空，也没有wakeup或新消息处理，则发生空轮询，CPU使用率100%，
   Netty的解决办法
   （1）对Selector的select操作周期进行统计，每完成一次空的select操作进行一次计数，
   （2）若在某个周期内连续发生N次空轮询，则触发了epoll死循环bug。
   （3）重建Selector，判断是否是其他线程发起的重建请求，若不是则将原SocketChannel从旧的Selector上去除注册，
   重新注册到新的Selector上，并将原来的Selector关闭。